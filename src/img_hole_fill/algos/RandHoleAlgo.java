package img_hole_fill.algos;

import img_hole_fill.utils.IntPair;

import java.util.HashSet;

/**
 * Filling a hole in an image using in nlog(n) where n is the number of pixels in the hole.
 * Doing this using randomization to choose log(n) pixels in the hole, filling them using
 * the boundary of the hole and then filling the rest using the the initial log(n) filled pixels
 */
public class RandHoleAlgo extends RandAlgo implements FillHoleAlgo{

    private HashSet<IntPair> otherHolePixels;

    /**
     * Factory for the class
     * @return An instance of this class
     */
    public static RandHoleAlgo getRandHoleAlgoInstance(){
        return new RandHoleAlgo();
    }

    /**
     * Hiding the constructor
     */
    private RandHoleAlgo(){}

    private void initOtherHolePixels(){
        otherHolePixels = new HashSet<>();
        for (int i=repsAmount; i<repsLst.size(); i++){
            otherHolePixels.add(repsLst.get(i));
        }
    }

    private void applyHelper(float[][] grayMat, HashSet<IntPair> boundarySet, WeightFunction func,
                              boolean isEightConnected){
        BaseAlgo.getInstance().apply(grayMat, repsSet, boundarySet, func, isEightConnected);
        BaseAlgo.getInstance().apply(grayMat, otherHolePixels, repsSet, func, isEightConnected);
    }

    /**
     * The algorithm to fill the hole
     * @param grayMat The gray scale matrix representing the image with the hole
     * @param holeSet The pixels in the hole
     * @param boundarySet The pixels in the boundary
     * @param func The weight function with which to calculate the values to fill with
     * @param isEightConnected Whether or not to apply the 8-connected approach (the default is the
     * 4-connected approach)
     */
    @Override
    public void apply(float[][] grayMat, HashSet<IntPair> holeSet, HashSet<IntPair> boundarySet,
                       WeightFunction func, boolean isEightConnected) {
        initHelper(holeSet);
        initOtherHolePixels();
        applyHelper(grayMat, boundarySet, func, isEightConnected);
    }

    /**
     * This is used in the writing of the result generated by this algo. The output string will be
     * part of the name of the output image.
     * @return The string that should be concatenated with the file name of the output image generated by
     * this algo
     */
    @Override
    public String toString(){
        return "RandHoleAlgo";
    }
}
