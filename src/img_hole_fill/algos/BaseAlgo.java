package img_hole_fill.algos;

import img_hole_fill.utils.IntPair;
import java.util.HashSet;

/**
 * The base algorithm for filling a hole in an image, works in O(n^2) where n is the number of pixels in
 *  the hole
 */
public class BaseAlgo implements FillHoleAlgo{
    static final String name = "BaseAlgo";

    /**
     * The only instance of this algo
     */
    private static final BaseAlgo singleton = new BaseAlgo();

    /**
     * Get a BaseAlgo instance
     * @return A BaseAlgo instance
     */
    public static BaseAlgo getInstance() {
        return singleton;
    }

    /**
     * This is private for applying the singleton design pattern
     */
    private BaseAlgo(){}

    /**
     * Gets the value to fill the given hole pixel with
     * @param holePix The hole pixel to fill
     * @param grayMat The gray scale mat to get values of other pixels from
     * @param boundarySet The pixels in the boundary
     * @param func The weight function to use in calculating the value to fill the given hole pixel
     * @return The value to fill the hole pixel with
     */
    static float getPixFillVal(IntPair holePix, float[][] grayMat, HashSet<IntPair> boundarySet,
                               WeightFunction func){
        float numerator = 0;
        float denominator = 0;
        float curWeight;
        float curNumAdd;
        int counter = 0;
        float curMatVal;
        if (boundarySet.size() == 0) return 0;
        for (IntPair boundaryPoint : boundarySet){
            counter++;
            curWeight = func.getWeight(holePix, boundaryPoint);
            denominator += curWeight;
            curMatVal = grayMat[boundaryPoint.getX()][boundaryPoint.getY()];
//            if (curMatVal < 0) {
//                curMatVal = 0;
//            }
            curNumAdd = curWeight * curMatVal;
            numerator += curNumAdd;
        }
        return numerator / denominator;
    }

    /**
     * Fills the entire hole by applying the getPixFillVal for each pixel in the hole
     * @param grayMat The matrix to fill its values
     * @param holeSet The pixels in the hole
     * @param boundarySet The pixels in the boundary
     * @param func The weight function to use in order to calculate the values to fill with
     * @param isEightConnected Whether or not to use the 8-connected approach in the algorithm (the default
     *                        is 4-connected)
     */
    public void apply(float[][] grayMat, HashSet<IntPair> holeSet,
                      HashSet<IntPair> boundarySet, WeightFunction func, boolean isEightConnected){
        for (IntPair hole : holeSet){
            grayMat[hole.getX()][hole.getY()] = getPixFillVal(hole, grayMat, boundarySet, func);
        }
    }

    /**
     * This is used in the writing of the result generated by this algo. The output string will be
     * part of the name of the output image.
     * @return The string that should be concatenated with the file name of the output image generated by
     * this algo
     */
    @Override
    public String toString(){
        return name;
    }
}
