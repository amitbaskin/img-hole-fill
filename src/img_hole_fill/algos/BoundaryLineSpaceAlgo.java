package img_hole_fill.algos;

import img_hole_fill.utils.GeneralUtils;
import img_hole_fill.utils.IntPair;
import java.util.*;

/**
 * An algorithm for filling a hole in an image in O(nlog(n)) where n is the number of pixels in the hole.
 * It works by taking log(n) points on the boundary in equal distances and calculating the values of the
 * pixels in the hole using the chosen pixels.
 */
public class BoundaryLineSpaceAlgo extends LineSpace implements FillHoleAlgo {
    private int headRepIndex = -1;
    private final boolean isRotate;

    /**
     * Create a new instance of this algo
     * @param isRotate Whether or not to apply the rotation approach in this algo
     */
    public BoundaryLineSpaceAlgo(boolean isRotate){
        this.isRotate = isRotate;
    }

    /**
     * Prepares the next set of pixels to choose from the boundary
     */
    private void preRepsUpdate() {
        headRepIndex++;
        headRepIndex %= repsLst.size();
        nextRepIndex = headRepIndex;
    }

    /**
     * Fills the hole in a given image applying this algorithm
     * @param grayMat The gray scale matrix of pixels representing the image
     * @param holeSet The pixels in the hole
     * @param boundarySet The pixels in the boundary
     * @param func The weighting function with which to calculate the values to fill with
     * @param isEightConnected Whether or not to apply the 8-connected approach (the default is the
     *                         4-connected approach)
     */
    @Override
    public void apply(float[][] grayMat, HashSet<IntPair> holeSet, HashSet<IntPair> boundarySet,
                      WeightFunction func, boolean isEightConnected) {
        initLineSpace(boundarySet);
        preRepsUpdate();
        ArrayList<IntPair> sortedHoleSet = GeneralUtils.getSortedLst(holeSet);
        for (IntPair pix : sortedHoleSet) {
            grayMat[pix.getX()][pix.getY()] = BaseAlgo.getPixFillVal(pix, grayMat, repsSet, func);
            if (isRotate) {
                preRepsUpdate();
                initReps();
            }
        }
    }

    /**
     * This is used in the writing of the result generated by this algo. The output string will be
     * part of the name of the output image.
     * @return The string that should be concatenated with the file name of the output image generated by
     * this algo
     */
    @Override
    public String toString() {
        return "BoundaryLineSpaceAlgo" + (isRotate ? "Rotate" : "");
    }
}
