memberSearchIndex = [{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.algos","c":"BaseAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.algos","c":"BoundaryLineSpaceAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.algos","c":"FillHoleAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.algos","c":"HolesLineSpaceAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.algos","c":"RandBoundaryAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.algos","c":"RandHoleAlgo","l":"apply(float[][], HashSet<IntPair>, HashSet<IntPair>, WeightFunction, boolean)","u":"apply(float[][],java.util.HashSet,java.util.HashSet,img_hole_fill.algos.WeightFunction,boolean)"},{"p":"img_hole_fill.utils","c":"GeneralUtils","l":"applySetsDiff(HashSet<IntPair>, HashSet<IntPair>)","u":"applySetsDiff(java.util.HashSet,java.util.HashSet)"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"ApproxAlgo(boolean, boolean, boolean)","u":"%3Cinit%3E(boolean,boolean,boolean)"},{"p":"img_hole_fill.algos","c":"BoundaryLineSpaceAlgo","l":"BoundaryLineSpaceAlgo(boolean)","u":"%3Cinit%3E(boolean)"},{"p":"img_hole_fill.utils","c":"BoundaryUtils","l":"BoundaryUtils()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.utils","c":"BuffImgUtils","l":"BuffImgUtils()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.utils","c":"IntPair","l":"compareTo(IntPair)","u":"compareTo(img_hole_fill.utils.IntPair)"},{"p":"img_hole_fill.utils","c":"PixConnectUtils","l":"completeEntireEightConnected(HashSet<IntPair>, HashSet<IntPair>)","u":"completeEntireEightConnected(java.util.HashSet,java.util.HashSet)"},{"p":"img_hole_fill.utils","c":"GeneralUtils","l":"copyArr(float[][])"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"DefaultWeight(float, float)","u":"%3Cinit%3E(float,float)"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"epsilon()"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"img_hole_fill.utils","c":"IntPair","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"img_hole_fill","c":"Runner","l":"fillByHoledMat(String, float[][], WeightFunction, boolean, FillHoleAlgo)","u":"fillByHoledMat(java.lang.String,float[][],img_hole_fill.algos.WeightFunction,boolean,img_hole_fill.algos.FillHoleAlgo)"},{"p":"img_hole_fill","c":"Tests","l":"fillByHoledMatTest(String, String, boolean, FillHoleAlgo)","u":"fillByHoledMatTest(java.lang.String,java.lang.String,boolean,img_hole_fill.algos.FillHoleAlgo)"},{"p":"img_hole_fill","c":"Runner","l":"fillByHoleFile(String, String, WeightFunction, boolean, FillHoleAlgo)","u":"fillByHoleFile(java.lang.String,java.lang.String,img_hole_fill.algos.WeightFunction,boolean,img_hole_fill.algos.FillHoleAlgo)"},{"p":"img_hole_fill","c":"Runner","l":"fillImg(String, float[][], HashSet<IntPair>, WeightFunction, String, boolean, FillHoleAlgo)","u":"fillImg(java.lang.String,float[][],java.util.HashSet,img_hole_fill.algos.WeightFunction,java.lang.String,boolean,img_hole_fill.algos.FillHoleAlgo)"},{"p":"img_hole_fill.utils","c":"GeneralUtils","l":"GeneralUtils()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.utils","c":"BoundaryUtils","l":"getBoundarySet(HashSet<IntPair>, boolean)","u":"getBoundarySet(java.util.HashSet,boolean)"},{"p":"img_hole_fill.utils","c":"BuffImgUtils","l":"getBufferedImg(String)","u":"getBufferedImg(java.lang.String)"},{"p":"img_hole_fill.utils","c":"MatImgUtils","l":"getColorMatFromImg(BufferedImage)","u":"getColorMatFromImg(java.awt.image.BufferedImage)"},{"p":"img_hole_fill.utils","c":"PixConnectUtils","l":"getEntireFourConnected(HashSet<IntPair>)","u":"getEntireFourConnected(java.util.HashSet)"},{"p":"img_hole_fill.utils","c":"BuffImgUtils","l":"getGrayImgFromFileName(String)","u":"getGrayImgFromFileName(java.lang.String)"},{"p":"img_hole_fill.utils","c":"BuffImgUtils","l":"getGrayImgFromMat(float[][])"},{"p":"img_hole_fill.utils","c":"MatImgUtils","l":"getGrayMatFromColorMat(Color[][])","u":"getGrayMatFromColorMat(java.awt.Color[][])"},{"p":"img_hole_fill.utils","c":"MatImgUtils","l":"getGrayMatFromFile(String)","u":"getGrayMatFromFile(java.lang.String)"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"getHoledGrayMatFromFile(String, String)","u":"getHoledGrayMatFromFile(java.lang.String,java.lang.String)"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"getHoleSetFromFile(String)","u":"getHoleSetFromFile(java.lang.String)"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"getHoleSetFromMat(float[][], HoleCondition)","u":"getHoleSetFromMat(float[][],img_hole_fill.utils.HoleCondition)"},{"p":"img_hole_fill.algos","c":"HolesLineSpaceAlgo","l":"getHolesLineSpaceAlgoInstance()"},{"p":"img_hole_fill.algos","c":"BaseAlgo","l":"getInstance()"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"getInstance()"},{"p":"img_hole_fill.utils","c":"StrictHoleCondition","l":"getInstance()"},{"p":"img_hole_fill.utils","c":"ThresholdHoleCondition","l":"getInstance()"},{"p":"img_hole_fill.utils","c":"GeneralUtils","l":"getLog2(int)"},{"p":"img_hole_fill.algos","c":"RandBoundaryAlgo","l":"getRandBoundaryAlgoInstance()"},{"p":"img_hole_fill.algos","c":"RandHoleAlgo","l":"getRandHoleAlgoInstance()"},{"p":"img_hole_fill.utils","c":"PixConnectUtils","l":"getSingleFourComplementToEight(IntPair)","u":"getSingleFourComplementToEight(img_hole_fill.utils.IntPair)"},{"p":"img_hole_fill.utils","c":"PixConnectUtils","l":"getSingleFourConnected(IntPair)","u":"getSingleFourConnected(img_hole_fill.utils.IntPair)"},{"p":"img_hole_fill.utils","c":"GeneralUtils","l":"getSortedLst(HashSet<IntPair>)","u":"getSortedLst(java.util.HashSet)"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"getWeight(IntPair, IntPair)","u":"getWeight(img_hole_fill.utils.IntPair,img_hole_fill.utils.IntPair)"},{"p":"img_hole_fill.algos","c":"WeightFunction","l":"getWeight(IntPair, IntPair)","u":"getWeight(img_hole_fill.utils.IntPair,img_hole_fill.utils.IntPair)"},{"p":"img_hole_fill.utils","c":"IntPair","l":"getX()"},{"p":"img_hole_fill.utils","c":"IntPair","l":"getY()"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"hashCode()"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"hashCode()"},{"p":"img_hole_fill.utils","c":"IntPair","l":"hashCode()"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"HoleUtils()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"incrementNextRepIndex()"},{"p":"img_hole_fill.algos","c":"RandAlgo","l":"initHelper(HashSet<IntPair>)","u":"initHelper(java.util.HashSet)"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"initLineSpace(HashSet<IntPair>)","u":"initLineSpace(java.util.HashSet)"},{"p":"img_hole_fill.algos","c":"RandAlgo","l":"initRandLst(HashSet<IntPair>)","u":"initRandLst(java.util.HashSet)"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"initReps()"},{"p":"img_hole_fill.algos","c":"RandAlgo","l":"initRepsAmount()"},{"p":"img_hole_fill.algos","c":"RepresentativesApproach","l":"initRepsAmount()"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"initRepsDist()"},{"p":"img_hole_fill.algos","c":"RandAlgo","l":"initRepsSet()"},{"p":"img_hole_fill.utils","c":"IntPair","l":"IntPair(int, int)","u":"%3Cinit%3E(int,int)"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"isAddToBoundaryAsWeGo()"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"isEntireBoundary()"},{"p":"img_hole_fill.utils","c":"HoleCondition","l":"isHole(float[][], int, int)","u":"isHole(float[][],int,int)"},{"p":"img_hole_fill.utils","c":"StrictHoleCondition","l":"isHole(float[][], int, int)","u":"isHole(float[][],int,int)"},{"p":"img_hole_fill.utils","c":"ThresholdHoleCondition","l":"isHole(float[][], int, int)","u":"isHole(float[][],int,int)"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"isLargeInnerLayer()"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"LineSpace()","u":"%3Cinit%3E()"},{"p":"img_hole_fill","c":"Main","l":"Main()","u":"%3Cinit%3E()"},{"p":"img_hole_fill","c":"Main","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"img_hole_fill","c":"Runner","l":"mainSection(String, String, boolean)","u":"mainSection(java.lang.String,java.lang.String,boolean)"},{"p":"img_hole_fill.utils","c":"MatImgUtils","l":"MatImgUtils()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"nextRepIndex"},{"p":"img_hole_fill.utils","c":"PixConnectUtils","l":"PixConnectUtils()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.algos","c":"RandAlgo","l":"RandAlgo()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.algos","c":"RepresentativesApproach","l":"RepresentativesApproach()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.algos","c":"RepresentativesApproach","l":"repsAmount"},{"p":"img_hole_fill.algos","c":"LineSpace","l":"repsDist"},{"p":"img_hole_fill.algos","c":"RepresentativesApproach","l":"repsLst"},{"p":"img_hole_fill.algos","c":"RepresentativesApproach","l":"repsSet"},{"p":"img_hole_fill","c":"Runner","l":"runApproxAlgo(String, String)","u":"runApproxAlgo(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Runner","l":"runBaseAlgo(String, String)","u":"runBaseAlgo(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Runner","l":"runBoundaryLineSpaceAlgo(String, String)","u":"runBoundaryLineSpaceAlgo(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Tests","l":"runBoundaryLineSpaceAlgoWithRotation(String, String)","u":"runBoundaryLineSpaceAlgoWithRotation(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Runner","l":"runHoleLineSpaceAlgo(String, String)","u":"runHoleLineSpaceAlgo(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Runner","l":"Runner()","u":"%3Cinit%3E()"},{"p":"img_hole_fill","c":"Tests","l":"runRandBoundaryAlgo(String, String)","u":"runRandBoundaryAlgo(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Tests","l":"runRandHoleAlgo(String, String)","u":"runRandHoleAlgo(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Tests","l":"runVarious(String, String)","u":"runVarious(java.lang.String,java.lang.String)"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"setHolesInImg(BufferedImage, HashSet<IntPair>)","u":"setHolesInImg(java.awt.image.BufferedImage,java.util.HashSet)"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"setHolesInMat(float[][], HashSet<IntPair>)","u":"setHolesInMat(float[][],java.util.HashSet)"},{"p":"img_hole_fill.utils","c":"HoleUtils","l":"setHolesInMatByHoleFile(String, float[][])","u":"setHolesInMatByHoleFile(java.lang.String,float[][])"},{"p":"img_hole_fill","c":"Tests","l":"Tests()","u":"%3Cinit%3E()"},{"p":"img_hole_fill.algos","c":"ApproxAlgo","l":"toString()"},{"p":"img_hole_fill.algos","c":"BaseAlgo","l":"toString()"},{"p":"img_hole_fill.algos","c":"BoundaryLineSpaceAlgo","l":"toString()"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"toString()"},{"p":"img_hole_fill.algos","c":"HolesLineSpaceAlgo","l":"toString()"},{"p":"img_hole_fill.algos","c":"RandBoundaryAlgo","l":"toString()"},{"p":"img_hole_fill.algos","c":"RandHoleAlgo","l":"toString()"},{"p":"img_hole_fill.utils","c":"IntPair","l":"toString()"},{"p":"img_hole_fill","c":"Tests","l":"writeGrayImgTest(String)","u":"writeGrayImgTest(java.lang.String)"},{"p":"img_hole_fill","c":"Tests","l":"writeHoledImgByHoledMatTest(String, String)","u":"writeHoledImgByHoledMatTest(java.lang.String,java.lang.String)"},{"p":"img_hole_fill","c":"Tests","l":"writeHoledImgByHoleFileTest(String, String)","u":"writeHoledImgByHoleFileTest(java.lang.String,java.lang.String)"},{"p":"img_hole_fill.utils","c":"BuffImgUtils","l":"writeImg(BufferedImage, String)","u":"writeImg(java.awt.image.BufferedImage,java.lang.String)"},{"p":"img_hole_fill.utils","c":"IntPair","l":"x()"},{"p":"img_hole_fill.utils","c":"IntPair","l":"y()"},{"p":"img_hole_fill.algos","c":"DefaultWeight","l":"z()"}];updateSearchResults();